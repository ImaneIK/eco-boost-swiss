أبدأ بخلاصة عملية واحدة قابلة للصق (prompt) ثم أشرح التغييرات خطوة‑بخطوة، والملفات المتأثرة، وكيف تختبر وتستمر.

## Prompt جاهز (انسخ والصق لتنفيذ نفس التعديلات)
نسخة مُركَّزة بالإنجليزية/العربية مناسبة لصقها في أداة تلقائية أو مشاركتها مع مطور/مساعد:

Prompt (Arabic + English summary)
```
أريد إجراء تحسينات SEO وaccessibility على مشروع React + Vite الموجود في المسار الجذري، مع الخطوات التالية:
1. تحديث ملف .env بالقيم البيئية التالية:
   - VITE_CLERK_PUBLISHABLE_KEY=<YOUR_PUBLISHABLE_KEY>
   - VITE_BACKEND_URL=http://localhost:3000
   - SUPABASE_URL=<...>
   - SUPABASE_SERVICE_ROLE_KEY=<...>
   - CLERK_SECRET_KEY=<...>

2. تحسين head (index.html):
   - ضبط <title>, <meta name="description"> و<meta name="keywords"> وOpen Graph tags مناسبة للمنطقة (Suisse, UE, Afrique du Nord).

3. في صفحة الهبوط `src/pages/Index.tsx`:
   - إضافة aria-label لكل section رئيسي (hero, form, how, subventions, testimonials).
   - تحسين جميع صور الصفحة بإضافة وصف بديل واضح (alt) إن كان فارغًا، وإضافة loading="lazy".
   - إضافة JSON-LD (Organization + WebPage) داخل المكوّن كـ <script type="application/ld+json"> يتضمن name, url, logo, description.
   - الحفاظ على البنية الحالية، مع تحسينات طفيفة فقط (لا تغييرات تصميمية).

4. إنشاء ملف `image-seo.csv` في جذر المشروع يحوي: filename, alt_text, og_image_url, suggested_caption لكل صورة.

5. تثبيت الحزم ثم تشغيل dev server للتحقق:
   - استخدم: npm install
   - ثم: npm run dev
   - تأكد من وجود عناصر SEO داخل DOM ووجود JSON-LD.

النتيجة المتوقعة:
- صفحة تعمل محليًا.
- تحسينات SEO وAccessibility مضافة بدون تغيير في الواجهة.
- ملف CSV بالـ ALT المقترحة للصور.
```

## ملخّص التغييرات التي طبقتها هنا
- ملف البيئة:
  - أنشأت/حدّثت `.env` بقيم: `VITE_CLERK_PUBLISHABLE_KEY`, `VITE_BACKEND_URL`, متغيرات Supabase و`CLERK_SECRET_KEY` حتى يعمل التطبيق محلياً.
- تحسين head:
  - عدّلت `index.html` وأضافت عنوان محسّن، `meta description` و`meta keywords` وOpen Graph tags مخصّصة للمناطق المستهدفة (Suisse, UE, Afrique du Nord).
- صور وSEO للصور:
  - جمعت صور المشروع (`public` + `src/assets`) وأنشأت `image-seo.csv` يحتوي على أسماء الملفات، نصوص alt مقترحة، og image URL وcaption اقتراحي.
- صفحة Index (`src/pages/Index.tsx`):
  - أضفت متغير `ldJson` مع JSON-LD (Organization + WebPage).
  - حقنت `<script type="application/ld+json">{JSON.stringify(ldJson)}</script>` داخل JSX ليتعرّف عليه محرك البحث.
  - حسّنت جميع صور الصفحة بإضافة/تعديل:
    - صفات `alt` واضحة.
    - `loading="lazy"` لتحسين الأداء.
  - أضفت `aria-label` للمناطق/الأقسام الرئيسية: hero, form, how, subventions, testimonials.
- التشغيل والتحقق:
  - ثبتت الحزم محلياً ثم شغّلت `npm run dev`. الخادم بدأ بنجاح (في جهازك انتقل إلى http://localhost:8081/ إذا كان 8080 مستخدم).

## التغييرات الأخيرة (أكتوبر 2025)

- تم رفع المشروع بالكامل إلى مستودع GitHub جديد: 
  https://github.com/starGt324/Devis-subventionn-s.git
- تم ربط الريموت وتنفيذ جميع أوامر git (init, add, commit, branch -M main, push -u origin main).
- تم إضافة وصف مختصر للمستودع:
  - العربية: منصة إدارة عروض الأسعار B2B و الأتمتة للشركات في سويسرا وأوروبا وشمال أفريقيا.
  - الفرنسية: Plateforme de gestion et d’automatisation des devis B2B pour la Suisse, l’Europe et l’Afrique du Nord.
- جميع التعديلات والملفات (SEO, accessibility, image-seo.csv, README, .env, إلخ) أصبحت متاحة على GitHub.
- يمكنك الآن مشاركة المستودع أو العمل عليه مع فريقك مباشرة من GitHub.

## التحديثات الأخيرة (18 أكتوبر 2025)

### تغييرات الهوية البصرية
- تغيير اسم العلامة التجارية من "Comparatifdevis" إلى "Comparatifdevis - Devis subventionnés"
- تحديث الشعار من "CD" إلى "AH" في جميع أنحاء التطبيق
- تركيز العرض على B2B فقط (إزالة إشارات B2C)

### تحديثات SEO
1. تحديثات في `index.html`:
   - تحديث عنوان الصفحة إلى: "Devis subventionnés - Automatisation des Devis B2B en Suisse et UE"
   - تحديث وصف meta لعكس التركيز على B2B
   - تحديث الكلمات المفتاحية لتناسب نموذج B2B
   - تحديث meta author إلى "Devis subventionnés"
   - تحديث عنوان Open Graph

2. تحديثات في `src/pages/Index.tsx`:
   - تحديث بيانات JSON-LD لتعكس الهوية الجديدة
   - تحديث اسم المنظمة إلى "Comparatifdevis - Devis subventionnés"
   - تحديث الوصف ليركز على خدمات B2B

### تحديثات البيئة
- إضافة متغيرات Cloudinary في `.env`:
  ```
  CLOUDINARY_URL=cloudinary://922742942891145:rAmBFDXj_aUQygGWw2QE4INASbo@dfdshe39z
  VITE_CLOUDINARY_CLOUD_NAME=dfdshe39z
  VITE_CLOUDINARY_UPLOAD_PRESET=devis_app
  ```

### مراجعة وتنظيف
- تحديث وتنظيف ملف `SEO_summary.txt` لعكس التغييرات الجديدة
- دفع جميع التغييرات إلى فرع `test` على GitHub

## تفسير التغييرات ولماذا تمّت
- إضافة/تحسين meta tags (title, description, keywords) → لتحسين معدل النقر في نتائج البحث ووضوح العرض الجغرافي والوظيفي للموقع.
- Open Graph tags → تحسّن طريقة ظهور الروابط عند المشاركة في الشبكات الاجتماعية.
- alt للصور → ضروري للوصول (accessibility) ومفيد لمحركات البحث لفهرسة محتوى الصورة.
- loading="lazy" → يقلّل وقت التحميل الأولي ويحفّز أداء الصفحة (Core Web Vitals).
- aria-labels → تحسين تجربة المستخدمين الذين يستخدمون قُرّاء الشاشة، وتساعد محركات البحث على فهم بنية الصفحة.
- JSON-LD → تزوّد محركات البحث ببيانات منظمة عن المنظمة والصفحة، قد تُحسن ظهور النتائج الغنية (rich results).
- ملف CSV للصور → يسهل إدارة ومرجعة أوصاف الصور وإدراجها أوتوماتيكياً لاحقًا.

## كيف تختبر وتتحقق بسرعة
1. شغّل الحزم:
```powershell
# في PowerShell أو استخدم cmd كما تفضّل
npm install
npm run dev
```
2. افتح الصفحة المحلية (المخرجات عادةً تظهر مثل):
- http://localhost:8081/ (أو http://localhost:8080/ إن لم يكن المنفذ مستخدماً)
3. تأكد من العناصر:
   - افتح DevTools → Elements: ابحث عن `<script type="application/ld+json">` وتحقق من محتوى JSON-LD.
   - تحقق من تواجد `aria-label` على الأقسام، ووجود `alt` و`loading="lazy"` على الصور.
   - فتح Console وNetwork للتأكد من عدم ظهور أخطاء جافاسكربت أو روابط مكسورة.
4. اختبارات خارجية (اختياري لكن موصى به):
   - Google Rich Results Test على URL الإنتاجي أو عبر وضع الصفحة محليًا مع public URL.
   - Lighthouse (Performance / Accessibility / SEO) في DevTools.

## ملفات الـ CSV والنسخ متعددة اللغات
- حاليًا `image-seo.csv` يحتوي أوصاف بالفرنسية. إن رغبت أضيف أعمدة بالعربية (alt_ar) أو بالإنجليزية (alt_en) لتوليد أوصاف متعددة اللغة أو إدراجها ديناميكياً في JSX.

## التوصيات التالية (اقتراحات لتطوير إضافي)
- استخدم مدير Head ديناميكي (مثل react-helmet-async) لتوليد meta tags ديناميكيًا حسب الصفحة/لغة للمسارّات الأخرى.
- أضف schema إضافي (LocalBusiness مع العنوان، ساعات العمل) إن أردت ظهورًا محليًا أفضل.
- أنشئ اختبار صغير (unit/integration) يتأكد من أن JSON-LD يُدرج والـ alt موجودة لكل صورة مهمة.
- نشر النسخة المحدثة على Vercel ثم فحصها عبر أدوات Google Search Console وRich Results.

---

لو تحتاج، أحول هذا الملخّص إلى ملف README صغير داخل المشروع أو أمدّك بنسخة `prompt` مُترجمة بالكامل للإنجليزية أو نص جاهز لوضعه في issue على GitHub. هل تفضّل نسخة README أو ملف PR مع الوصف الجاهز?